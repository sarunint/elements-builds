{"version":3,"file":"elements.js","sources":["../../../packages/elements/esm5/src/utils.js","../../../packages/elements/esm5/src/extract-projectable-nodes.js","../../../packages/elements/esm5/src/component-factory-strategy.js","../../../packages/elements/esm5/src/create-custom-element.js","../../../packages/elements/esm5/src/version.js","../../../packages/elements/esm5/public_api.js","../../../packages/elements/esm5/elements.js"],"sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport { ComponentFactoryResolver } from '@angular/core';\n/** @type {?} */\nvar elProto = /** @type {?} */ (Element.prototype);\n/** @type {?} */\nvar matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n    elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n/** *\n * Provide methods for scheduling the execution of a callback.\n  @type {?} */\nexport var scheduler = {\n    /**\n     * Schedule a callback to be called after some delay.\n     *\n     * Returns a function that when executed will cancel the scheduled function.\n     */\n    schedule: /**\n     * Schedule a callback to be called after some delay.\n     *\n     * Returns a function that when executed will cancel the scheduled function.\n     * @param {?} taskFn\n     * @param {?} delay\n     * @return {?}\n     */\n    function (taskFn, delay) {\n        /** @type {?} */\n        var id = setTimeout(taskFn, delay);\n        return function () { return clearTimeout(id); };\n    },\n    /**\n     * Schedule a callback to be called before the next render.\n     * (If `window.requestAnimationFrame()` is not available, use `scheduler.schedule()` instead.)\n     *\n     * Returns a function that when executed will cancel the scheduled function.\n     */\n    scheduleBeforeRender: /**\n     * Schedule a callback to be called before the next render.\n     * (If `window.requestAnimationFrame()` is not available, use `scheduler.schedule()` instead.)\n     *\n     * Returns a function that when executed will cancel the scheduled function.\n     * @param {?} taskFn\n     * @return {?}\n     */\n    function (taskFn) {\n        // TODO(gkalpak): Implement a better way of accessing `requestAnimationFrame()`\n        //                (e.g. accounting for vendor prefix, SSR-compatibility, etc).\n        if (typeof window === 'undefined') {\n            // For SSR just schedule immediately.\n            return scheduler.schedule(taskFn, 0);\n        }\n        if (typeof window.requestAnimationFrame === 'undefined') {\n            /** @type {?} */\n            var frameMs = 16;\n            return scheduler.schedule(taskFn, frameMs);\n        }\n        /** @type {?} */\n        var id = window.requestAnimationFrame(taskFn);\n        return function () { return window.cancelAnimationFrame(id); };\n    },\n};\n/**\n * Convert a camelCased string to kebab-cased.\n * @param {?} input\n * @return {?}\n */\nexport function camelToDashCase(input) {\n    return input.replace(/[A-Z]/g, function (char) { return \"-\" + char.toLowerCase(); });\n}\n/**\n * Create a `CustomEvent` (even on browsers where `CustomEvent` is not a constructor).\n * @param {?} doc\n * @param {?} name\n * @param {?} detail\n * @return {?}\n */\nexport function createCustomEvent(doc, name, detail) {\n    /** @type {?} */\n    var bubbles = false;\n    /** @type {?} */\n    var cancelable = false;\n    // On IE9-11, `CustomEvent` is not a constructor.\n    if (typeof CustomEvent !== 'function') {\n        /** @type {?} */\n        var event_1 = doc.createEvent('CustomEvent');\n        event_1.initCustomEvent(name, bubbles, cancelable, detail);\n        return event_1;\n    }\n    return new CustomEvent(name, { bubbles: bubbles, cancelable: cancelable, detail: detail });\n}\n/**\n * Check whether the input is an `Element`.\n * @param {?} node\n * @return {?}\n */\nexport function isElement(node) {\n    return !!node && node.nodeType === Node.ELEMENT_NODE;\n}\n/**\n * Check whether the input is a function.\n * @param {?} value\n * @return {?}\n */\nexport function isFunction(value) {\n    return typeof value === 'function';\n}\n/**\n * Convert a kebab-cased string to camelCased.\n * @param {?} input\n * @return {?}\n */\nexport function kebabToCamelCase(input) {\n    return input.replace(/-([a-z\\d])/g, function (_, char) { return char.toUpperCase(); });\n}\n/**\n * Check whether an `Element` matches a CSS selector.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\nexport function matchesSelector(element, selector) {\n    return matches.call(element, selector);\n}\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n * @param {?} value1\n * @param {?} value2\n * @return {?}\n */\nexport function strictEquals(value1, value2) {\n    return value1 === value2 || (value1 !== value1 && value2 !== value2);\n}\n/**\n * Gets a map of default set of attributes to observe and the properties they affect.\n * @param {?} inputs\n * @return {?}\n */\nexport function getDefaultAttributeToPropertyInputs(inputs) {\n    /** @type {?} */\n    var attributeToPropertyInputs = {};\n    inputs.forEach(function (_a) {\n        var propName = _a.propName, templateName = _a.templateName;\n        attributeToPropertyInputs[camelToDashCase(templateName)] = propName;\n    });\n    return attributeToPropertyInputs;\n}\n/**\n * Gets a component's set of inputs. Uses the injector to get the component factory where the inputs\n * are defined.\n * @param {?} component\n * @param {?} injector\n * @return {?}\n */\nexport function getComponentInputs(component, injector) {\n    /** @type {?} */\n    var componentFactoryResolver = injector.get(ComponentFactoryResolver);\n    /** @type {?} */\n    var componentFactory = componentFactoryResolver.resolveComponentFactory(component);\n    return componentFactory.inputs;\n}\n//# sourceMappingURL=utils.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isElement, matchesSelector } from './utils';\n/**\n * @param {?} host\n * @param {?} ngContentSelectors\n * @return {?}\n */\nexport function extractProjectableNodes(host, ngContentSelectors) {\n    /** @type {?} */\n    var nodes = host.childNodes;\n    /** @type {?} */\n    var projectableNodes = ngContentSelectors.map(function () { return []; });\n    /** @type {?} */\n    var wildcardIndex = -1;\n    ngContentSelectors.some(function (selector, i) {\n        if (selector === '*') {\n            wildcardIndex = i;\n            return true;\n        }\n        return false;\n    });\n    for (var i = 0, ii = nodes.length; i < ii; ++i) {\n        /** @type {?} */\n        var node = nodes[i];\n        /** @type {?} */\n        var ngContentIndex = findMatchingIndex(node, ngContentSelectors, wildcardIndex);\n        if (ngContentIndex !== -1) {\n            projectableNodes[ngContentIndex].push(node);\n        }\n    }\n    return projectableNodes;\n}\n/**\n * @param {?} node\n * @param {?} selectors\n * @param {?} defaultIndex\n * @return {?}\n */\nfunction findMatchingIndex(node, selectors, defaultIndex) {\n    /** @type {?} */\n    var matchingIndex = defaultIndex;\n    if (isElement(node)) {\n        selectors.some(function (selector, i) {\n            if ((selector !== '*') && matchesSelector(node, selector)) {\n                matchingIndex = i;\n                return true;\n            }\n            return false;\n        });\n    }\n    return matchingIndex;\n}\n//# sourceMappingURL=extract-projectable-nodes.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationRef, ComponentFactoryResolver, Injector, SimpleChange } from '@angular/core';\nimport { merge } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { extractProjectableNodes } from './extract-projectable-nodes';\nimport { isFunction, scheduler, strictEquals } from './utils';\n/** *\n * Time in milliseconds to wait before destroying the component ref when disconnected.\n  @type {?} */\nvar DESTROY_DELAY = 10;\n/**\n * Factory that creates new ComponentNgElementStrategy instance. Gets the component factory with the\n * constructor's injector's factory resolver and passes that factory to each strategy.\n *\n * \\@publicApi\n */\nvar /**\n * Factory that creates new ComponentNgElementStrategy instance. Gets the component factory with the\n * constructor's injector's factory resolver and passes that factory to each strategy.\n *\n * \\@publicApi\n */\nComponentNgElementStrategyFactory = /** @class */ (function () {\n    function ComponentNgElementStrategyFactory(component, injector) {\n        this.component = component;\n        this.injector = injector;\n        this.componentFactory =\n            injector.get(ComponentFactoryResolver).resolveComponentFactory(component);\n    }\n    /**\n     * @param {?} injector\n     * @return {?}\n     */\n    ComponentNgElementStrategyFactory.prototype.create = /**\n     * @param {?} injector\n     * @return {?}\n     */\n    function (injector) {\n        return new ComponentNgElementStrategy(this.componentFactory, injector);\n    };\n    return ComponentNgElementStrategyFactory;\n}());\n/**\n * Factory that creates new ComponentNgElementStrategy instance. Gets the component factory with the\n * constructor's injector's factory resolver and passes that factory to each strategy.\n *\n * \\@publicApi\n */\nexport { ComponentNgElementStrategyFactory };\nif (false) {\n    /** @type {?} */\n    ComponentNgElementStrategyFactory.prototype.componentFactory;\n    /** @type {?} */\n    ComponentNgElementStrategyFactory.prototype.component;\n    /** @type {?} */\n    ComponentNgElementStrategyFactory.prototype.injector;\n}\n/**\n * Creates and destroys a component ref using a component factory and handles change detection\n * in response to input changes.\n *\n * \\@publicApi\n */\nvar /**\n * Creates and destroys a component ref using a component factory and handles change detection\n * in response to input changes.\n *\n * \\@publicApi\n */\nComponentNgElementStrategy = /** @class */ (function () {\n    function ComponentNgElementStrategy(componentFactory, injector) {\n        this.componentFactory = componentFactory;\n        this.injector = injector;\n        /**\n         * Changes that have been made to the component ref since the last time onChanges was called.\n         */\n        this.inputChanges = null;\n        /**\n         * Whether the created component implements the onChanges function.\n         */\n        this.implementsOnChanges = false;\n        /**\n         * Whether a change detection has been scheduled to run on the component.\n         */\n        this.scheduledChangeDetectionFn = null;\n        /**\n         * Callback function that when called will cancel a scheduled destruction on the component.\n         */\n        this.scheduledDestroyFn = null;\n        /**\n         * Initial input values that were set before the component was created.\n         */\n        this.initialInputValues = new Map();\n        /**\n         * Set of inputs that were not initially set when the component was created.\n         */\n        this.uninitializedInputs = new Set();\n    }\n    /**\n     * Initializes a new component if one has not yet been created and cancels any scheduled\n     * destruction.\n     */\n    /**\n     * Initializes a new component if one has not yet been created and cancels any scheduled\n     * destruction.\n     * @param {?} element\n     * @return {?}\n     */\n    ComponentNgElementStrategy.prototype.connect = /**\n     * Initializes a new component if one has not yet been created and cancels any scheduled\n     * destruction.\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        // If the element is marked to be destroyed, cancel the task since the component was reconnected\n        if (this.scheduledDestroyFn !== null) {\n            this.scheduledDestroyFn();\n            this.scheduledDestroyFn = null;\n            return;\n        }\n        if (!this.componentRef) {\n            this.initializeComponent(element);\n        }\n    };\n    /**\n     * Schedules the component to be destroyed after some small delay in case the element is just\n     * being moved across the DOM.\n     */\n    /**\n     * Schedules the component to be destroyed after some small delay in case the element is just\n     * being moved across the DOM.\n     * @return {?}\n     */\n    ComponentNgElementStrategy.prototype.disconnect = /**\n     * Schedules the component to be destroyed after some small delay in case the element is just\n     * being moved across the DOM.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Return if there is no componentRef or the component is already scheduled for destruction\n        if (!this.componentRef || this.scheduledDestroyFn !== null) {\n            return;\n        }\n        // Schedule the component to be destroyed after a small timeout in case it is being\n        // moved elsewhere in the DOM\n        this.scheduledDestroyFn = scheduler.schedule(function () {\n            if (_this.componentRef) {\n                /** @type {?} */ ((_this.componentRef)).destroy();\n                _this.componentRef = null;\n            }\n        }, DESTROY_DELAY);\n    };\n    /**\n     * Returns the component property value. If the component has not yet been created, the value is\n     * retrieved from the cached initialization values.\n     */\n    /**\n     * Returns the component property value. If the component has not yet been created, the value is\n     * retrieved from the cached initialization values.\n     * @param {?} property\n     * @return {?}\n     */\n    ComponentNgElementStrategy.prototype.getInputValue = /**\n     * Returns the component property value. If the component has not yet been created, the value is\n     * retrieved from the cached initialization values.\n     * @param {?} property\n     * @return {?}\n     */\n    function (property) {\n        if (!this.componentRef) {\n            return this.initialInputValues.get(property);\n        }\n        return (/** @type {?} */ (this.componentRef.instance))[property];\n    };\n    /**\n     * Sets the input value for the property. If the component has not yet been created, the value is\n     * cached and set when the component is created.\n     */\n    /**\n     * Sets the input value for the property. If the component has not yet been created, the value is\n     * cached and set when the component is created.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    ComponentNgElementStrategy.prototype.setInputValue = /**\n     * Sets the input value for the property. If the component has not yet been created, the value is\n     * cached and set when the component is created.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    function (property, value) {\n        if (strictEquals(value, this.getInputValue(property))) {\n            return;\n        }\n        if (!this.componentRef) {\n            this.initialInputValues.set(property, value);\n            return;\n        }\n        this.recordInputChange(property, value);\n        (/** @type {?} */ (this.componentRef.instance))[property] = value;\n        this.scheduleDetectChanges();\n    };\n    /**\n     * Creates a new component through the component factory with the provided element host and\n     * sets up its initial inputs, listens for outputs changes, and runs an initial change detection.\n     */\n    /**\n     * Creates a new component through the component factory with the provided element host and\n     * sets up its initial inputs, listens for outputs changes, and runs an initial change detection.\n     * @param {?} element\n     * @return {?}\n     */\n    ComponentNgElementStrategy.prototype.initializeComponent = /**\n     * Creates a new component through the component factory with the provided element host and\n     * sets up its initial inputs, listens for outputs changes, and runs an initial change detection.\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        /** @type {?} */\n        var childInjector = Injector.create({ providers: [], parent: this.injector });\n        /** @type {?} */\n        var projectableNodes = extractProjectableNodes(element, this.componentFactory.ngContentSelectors);\n        this.componentRef = this.componentFactory.create(childInjector, projectableNodes, element);\n        this.implementsOnChanges =\n            isFunction((/** @type {?} */ ((this.componentRef.instance))).ngOnChanges);\n        this.initializeInputs();\n        this.initializeOutputs();\n        this.detectChanges();\n        /** @type {?} */\n        var applicationRef = this.injector.get(ApplicationRef);\n        applicationRef.attachView(this.componentRef.hostView);\n    };\n    /** Set any stored initial inputs on the component's properties. */\n    /**\n     * Set any stored initial inputs on the component's properties.\n     * @return {?}\n     */\n    ComponentNgElementStrategy.prototype.initializeInputs = /**\n     * Set any stored initial inputs on the component's properties.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.componentFactory.inputs.forEach(function (_a) {\n            var propName = _a.propName;\n            /** @type {?} */\n            var initialValue = _this.initialInputValues.get(propName);\n            if (initialValue) {\n                _this.setInputValue(propName, initialValue);\n            }\n            else {\n                // Keep track of inputs that were not initialized in case we need to know this for\n                // calling ngOnChanges with SimpleChanges\n                _this.uninitializedInputs.add(propName);\n            }\n        });\n        this.initialInputValues.clear();\n    };\n    /** Sets up listeners for the component's outputs so that the events stream emits the events. */\n    /**\n     * Sets up listeners for the component's outputs so that the events stream emits the events.\n     * @return {?}\n     */\n    ComponentNgElementStrategy.prototype.initializeOutputs = /**\n     * Sets up listeners for the component's outputs so that the events stream emits the events.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var eventEmitters = this.componentFactory.outputs.map(function (_a) {\n            var propName = _a.propName, templateName = _a.templateName;\n            /** @type {?} */\n            var emitter = /** @type {?} */ ((/** @type {?} */ (((_this.componentRef)).instance))[propName]);\n            return emitter.pipe(map(function (value) { return ({ name: templateName, value: value }); }));\n        });\n        this.events = merge.apply(void 0, eventEmitters);\n    };\n    /** Calls ngOnChanges with all the inputs that have changed since the last call. */\n    /**\n     * Calls ngOnChanges with all the inputs that have changed since the last call.\n     * @return {?}\n     */\n    ComponentNgElementStrategy.prototype.callNgOnChanges = /**\n     * Calls ngOnChanges with all the inputs that have changed since the last call.\n     * @return {?}\n     */\n    function () {\n        if (!this.implementsOnChanges || this.inputChanges === null) {\n            return;\n        }\n        /** @type {?} */\n        var inputChanges = this.inputChanges;\n        this.inputChanges = null;\n        (/** @type {?} */ ((((this.componentRef)).instance))).ngOnChanges(inputChanges);\n    };\n    /**\n     * Schedules change detection to run on the component.\n     * Ignores subsequent calls if already scheduled.\n     */\n    /**\n     * Schedules change detection to run on the component.\n     * Ignores subsequent calls if already scheduled.\n     * @return {?}\n     */\n    ComponentNgElementStrategy.prototype.scheduleDetectChanges = /**\n     * Schedules change detection to run on the component.\n     * Ignores subsequent calls if already scheduled.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.scheduledChangeDetectionFn) {\n            return;\n        }\n        this.scheduledChangeDetectionFn = scheduler.scheduleBeforeRender(function () {\n            _this.scheduledChangeDetectionFn = null;\n            _this.detectChanges();\n        });\n    };\n    /**\n     * Records input changes so that the component receives SimpleChanges in its onChanges function.\n     */\n    /**\n     * Records input changes so that the component receives SimpleChanges in its onChanges function.\n     * @param {?} property\n     * @param {?} currentValue\n     * @return {?}\n     */\n    ComponentNgElementStrategy.prototype.recordInputChange = /**\n     * Records input changes so that the component receives SimpleChanges in its onChanges function.\n     * @param {?} property\n     * @param {?} currentValue\n     * @return {?}\n     */\n    function (property, currentValue) {\n        // Do not record the change if the component does not implement `OnChanges`.\n        if (this.componentRef && !this.implementsOnChanges) {\n            return;\n        }\n        if (this.inputChanges === null) {\n            this.inputChanges = {};\n        }\n        /** @type {?} */\n        var pendingChange = this.inputChanges[property];\n        if (pendingChange) {\n            pendingChange.currentValue = currentValue;\n            return;\n        }\n        /** @type {?} */\n        var isFirstChange = this.uninitializedInputs.has(property);\n        this.uninitializedInputs.delete(property);\n        /** @type {?} */\n        var previousValue = isFirstChange ? undefined : this.getInputValue(property);\n        this.inputChanges[property] = new SimpleChange(previousValue, currentValue, isFirstChange);\n    };\n    /** Runs change detection on the component. */\n    /**\n     * Runs change detection on the component.\n     * @return {?}\n     */\n    ComponentNgElementStrategy.prototype.detectChanges = /**\n     * Runs change detection on the component.\n     * @return {?}\n     */\n    function () {\n        if (!this.componentRef) {\n            return;\n        }\n        this.callNgOnChanges(); /** @type {?} */\n        ((this.componentRef)).changeDetectorRef.detectChanges();\n    };\n    return ComponentNgElementStrategy;\n}());\n/**\n * Creates and destroys a component ref using a component factory and handles change detection\n * in response to input changes.\n *\n * \\@publicApi\n */\nexport { ComponentNgElementStrategy };\nif (false) {\n    /**\n     * Merged stream of the component's output events.\n     * @type {?}\n     */\n    ComponentNgElementStrategy.prototype.events;\n    /**\n     * Reference to the component that was created on connect.\n     * @type {?}\n     */\n    ComponentNgElementStrategy.prototype.componentRef;\n    /**\n     * Changes that have been made to the component ref since the last time onChanges was called.\n     * @type {?}\n     */\n    ComponentNgElementStrategy.prototype.inputChanges;\n    /**\n     * Whether the created component implements the onChanges function.\n     * @type {?}\n     */\n    ComponentNgElementStrategy.prototype.implementsOnChanges;\n    /**\n     * Whether a change detection has been scheduled to run on the component.\n     * @type {?}\n     */\n    ComponentNgElementStrategy.prototype.scheduledChangeDetectionFn;\n    /**\n     * Callback function that when called will cancel a scheduled destruction on the component.\n     * @type {?}\n     */\n    ComponentNgElementStrategy.prototype.scheduledDestroyFn;\n    /**\n     * Initial input values that were set before the component was created.\n     * @type {?}\n     */\n    ComponentNgElementStrategy.prototype.initialInputValues;\n    /**\n     * Set of inputs that were not initially set when the component was created.\n     * @type {?}\n     */\n    ComponentNgElementStrategy.prototype.uninitializedInputs;\n    /** @type {?} */\n    ComponentNgElementStrategy.prototype.componentFactory;\n    /** @type {?} */\n    ComponentNgElementStrategy.prototype.injector;\n}\n//# sourceMappingURL=component-factory-strategy.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ComponentNgElementStrategyFactory } from './component-factory-strategy';\nimport { createCustomEvent, getComponentInputs, getDefaultAttributeToPropertyInputs } from './utils';\n/**\n * Prototype for a class constructor based on an Angular component\n * that can be used for custom element registration. Implemented and returned\n * by the {\\@link createCustomElement createCustomElement() function}.\n *\n * \\@publicApi\n * @record\n * @template P\n */\nexport function NgElementConstructor() { }\n/**\n * An array of observed attribute names for the custom element,\n * derived by transforming input property names from the source component.\n * @type {?}\n */\nNgElementConstructor.prototype.observedAttributes;\n/**\n * Implements the functionality needed for a custom element.\n *\n * \\@publicApi\n * @abstract\n */\nvar /**\n * Implements the functionality needed for a custom element.\n *\n * \\@publicApi\n * @abstract\n */\nNgElement = /** @class */ (function (_super) {\n    tslib_1.__extends(NgElement, _super);\n    function NgElement() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * A subscription to change, connect, and disconnect events in the custom element.\n         */\n        _this.ngElementEventsSubscription = null;\n        return _this;\n    }\n    return NgElement;\n}(HTMLElement));\n/**\n * Implements the functionality needed for a custom element.\n *\n * \\@publicApi\n * @abstract\n */\nexport { NgElement };\nif (false) {\n    /**\n     * The strategy that controls how a component is transformed in a custom element.\n     * @type {?}\n     */\n    NgElement.prototype.ngElementStrategy;\n    /**\n     * A subscription to change, connect, and disconnect events in the custom element.\n     * @type {?}\n     */\n    NgElement.prototype.ngElementEventsSubscription;\n    /**\n     * Prototype for a handler that responds to a change in an observed attribute.\n     * @abstract\n     * @param {?} attrName The name of the attribute that has changed.\n     * @param {?} oldValue The previous value of the attribute.\n     * @param {?} newValue The new value of the attribute.\n     * @param {?=} namespace The namespace in which the attribute is defined.\n     * @return {?} Nothing.\n     */\n    NgElement.prototype.attributeChangedCallback = function (attrName, oldValue, newValue, namespace) { };\n    /**\n     * Prototype for a handler that responds to the insertion of the custom element in the DOM.\n     * @abstract\n     * @return {?} Nothing.\n     */\n    NgElement.prototype.connectedCallback = function () { };\n    /**\n     * Prototype for a handler that responds to the deletion of the custom element from the DOM.\n     * @abstract\n     * @return {?} Nothing.\n     */\n    NgElement.prototype.disconnectedCallback = function () { };\n}\n/** @typedef {?} */\nvar WithProperties;\nexport { WithProperties };\n/**\n * A configuration that initializes an NgElementConstructor with the\n * dependencies and strategy it needs to transform a component into\n * a custom element class.\n *\n * \\@publicApi\n * @record\n */\nexport function NgElementConfig() { }\n/**\n * The injector to use for retrieving the component's factory.\n * @type {?}\n */\nNgElementConfig.prototype.injector;\n/**\n * An optional custom strategy factory to use instead of the default.\n * The strategy controls how the transformation is performed.\n * @type {?|undefined}\n */\nNgElementConfig.prototype.strategyFactory;\n/**\n * \\@description Creates a custom element class based on an Angular component.\n *\n * Builds a class that encapsulates the functionality of the provided component and\n * uses the configuration information to provide more context to the class.\n * Takes the component factory's inputs and outputs to convert them to the proper\n * custom element API and add hooks to input changes.\n *\n * The configuration's injector is the initial injector set on the class,\n * and used by default for each created instance.This behavior can be overridden with the\n * static property to affect all newly created instances, or as a constructor argument for\n * one-off creations.\n *\n * \\@publicApi\n * @template P\n * @param {?} component The component to transform.\n * @param {?} config A configuration that provides initialization information to the created class.\n * @return {?} The custom-element construction class, which can be registered with\n * a browser's `CustomElementRegistry`.\n *\n */\nexport function createCustomElement(component, config) {\n    /** @type {?} */\n    var inputs = getComponentInputs(component, config.injector);\n    /** @type {?} */\n    var strategyFactory = config.strategyFactory || new ComponentNgElementStrategyFactory(component, config.injector);\n    /** @type {?} */\n    var attributeToPropertyInputs = getDefaultAttributeToPropertyInputs(inputs);\n    var NgElementImpl = /** @class */ (function (_super) {\n        tslib_1.__extends(NgElementImpl, _super);\n        function NgElementImpl(injector) {\n            var _this = _super.call(this) || this;\n            // Note that some polyfills (e.g. document-register-element) do not call the constructor.\n            // Do not assume this strategy has been created.\n            // TODO(andrewseguin): Add e2e tests that cover cases where the constructor isn't called. For\n            // now this is tested using a Google internal test suite.\n            _this.ngElementStrategy = strategyFactory.create(injector || config.injector);\n            return _this;\n        }\n        /**\n         * @param {?} attrName\n         * @param {?} oldValue\n         * @param {?} newValue\n         * @param {?=} namespace\n         * @return {?}\n         */\n        NgElementImpl.prototype.attributeChangedCallback = /**\n         * @param {?} attrName\n         * @param {?} oldValue\n         * @param {?} newValue\n         * @param {?=} namespace\n         * @return {?}\n         */\n        function (attrName, oldValue, newValue, namespace) {\n            if (!this.ngElementStrategy) {\n                this.ngElementStrategy = strategyFactory.create(config.injector);\n            }\n            /** @type {?} */\n            var propName = /** @type {?} */ ((attributeToPropertyInputs[attrName]));\n            this.ngElementStrategy.setInputValue(propName, newValue);\n        };\n        /**\n         * @return {?}\n         */\n        NgElementImpl.prototype.connectedCallback = /**\n         * @return {?}\n         */\n        function () {\n            var _this = this;\n            if (!this.ngElementStrategy) {\n                this.ngElementStrategy = strategyFactory.create(config.injector);\n            }\n            this.ngElementStrategy.connect(this);\n            // Listen for events from the strategy and dispatch them as custom events\n            this.ngElementEventsSubscription = this.ngElementStrategy.events.subscribe(function (e) {\n                /** @type {?} */\n                var customEvent = createCustomEvent(/** @type {?} */ ((_this.ownerDocument)), e.name, e.value);\n                _this.dispatchEvent(customEvent);\n            });\n        };\n        /**\n         * @return {?}\n         */\n        NgElementImpl.prototype.disconnectedCallback = /**\n         * @return {?}\n         */\n        function () {\n            if (this.ngElementStrategy) {\n                this.ngElementStrategy.disconnect();\n            }\n            if (this.ngElementEventsSubscription) {\n                this.ngElementEventsSubscription.unsubscribe();\n                this.ngElementEventsSubscription = null;\n            }\n        };\n        // Work around a bug in closure typed optimizations(b/79557487) where it is not honoring static\n        // field externs. So using quoted access to explicitly prevent renaming.\n        NgElementImpl['observedAttributes'] = Object.keys(attributeToPropertyInputs);\n        return NgElementImpl;\n    }(NgElement));\n    if (false) {\n        /* TODO: handle strange member:\n        static readonly['observedAttributes'] = Object.keys(attributeToPropertyInputs);\n        */\n    }\n    // Add getters and setters to the prototype for each property input. If the config does not\n    // contain property inputs, use all inputs by default.\n    inputs.map(function (_a) {\n        var propName = _a.propName;\n        return propName;\n    }).forEach(function (property) {\n        Object.defineProperty(NgElementImpl.prototype, property, {\n            get: function () { return this.ngElementStrategy.getInputValue(property); },\n            set: function (newValue) { this.ngElementStrategy.setInputValue(property, newValue); },\n            configurable: true,\n            enumerable: true,\n        });\n    });\n    return /** @type {?} */ ((/** @type {?} */ (NgElementImpl)));\n}\n//# sourceMappingURL=create-custom-element.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Version } from '@angular/core';\n/** *\n * \\@publicApi\n  @type {?} */\nexport var VERSION = new Version('7.1.0-beta.2-da59206995');\n//# sourceMappingURL=version.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport { NgElement, createCustomElement } from './src/create-custom-element';\nexport { VERSION } from './src/version';\n// This file only reexports content of the `src` folder. Keep it that way.\n//# sourceMappingURL=public_api.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { NgElement, createCustomElement, VERSION } from './public_api';\n//# sourceMappingURL=elements.js.map"],"names":["tslib_1.__extends"],"mappings":"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"}